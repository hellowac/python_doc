{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u8fd9\u662f\u6211\u6574\u7406\u7684\u4e0e python \u76f8\u5173\u7684\u77e5\u8bc6\u548c\u7b14\u8bb0","title":"\u9996\u9875"},{"location":"#_1","text":"\u8fd9\u662f\u6211\u6574\u7406\u7684\u4e0e python \u76f8\u5173\u7684\u77e5\u8bc6\u548c\u7b14\u8bb0","title":"\u7b80\u4ecb"},{"location":"component/nginx/","text":"nginx \u5b98\u7f51: https://nginx.org/ \u4e0b\u8f7d: https://nginx.org/en/download.html \u6587\u6863: https://nginx.org/en/docs/ \u5b89\u88c5 \u9996\u9875: https://nginx.org/en/docs/install.html \u5305\u5b89\u88c5: https://nginx.org/en/linux_packages.html RHEL/CentOS: https://nginx.org/en/linux_packages.html#RHEL-CentOS \u793a\u4f8b\u914d\u7f6e upstream linuxidc { server localhost:8500; server localhost:8501; server localhost:8502; server localhost:8503; } server { listen 80; listen [::]:80; #server_name security.cdiisp.com; root /opt/front; client_max_body_size 100M; #Load configuration files for the default server block. #include /etc/nginx/default.d/*.conf; location ^~ /api { include /etc/nginx/uwsgi_params; proxy_pass http://linuxidc; # uwsgi_pass portal; proxy_set_header REMOTE_ADDR $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } error_page 404 /404.html; location = /404.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } }","title":"nginx"},{"location":"component/nginx/#nginx","text":"\u5b98\u7f51: https://nginx.org/ \u4e0b\u8f7d: https://nginx.org/en/download.html \u6587\u6863: https://nginx.org/en/docs/ \u5b89\u88c5 \u9996\u9875: https://nginx.org/en/docs/install.html \u5305\u5b89\u88c5: https://nginx.org/en/linux_packages.html RHEL/CentOS: https://nginx.org/en/linux_packages.html#RHEL-CentOS","title":"nginx"},{"location":"component/nginx/#_1","text":"upstream linuxidc { server localhost:8500; server localhost:8501; server localhost:8502; server localhost:8503; } server { listen 80; listen [::]:80; #server_name security.cdiisp.com; root /opt/front; client_max_body_size 100M; #Load configuration files for the default server block. #include /etc/nginx/default.d/*.conf; location ^~ /api { include /etc/nginx/uwsgi_params; proxy_pass http://linuxidc; # uwsgi_pass portal; proxy_set_header REMOTE_ADDR $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } error_page 404 /404.html; location = /404.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } }","title":"\u793a\u4f8b\u914d\u7f6e"},{"location":"component/supervisor/","text":"supervisor","title":"supervisor"},{"location":"component/supervisor/#supervisor","text":"","title":"supervisor"},{"location":"component/zookeeper/","text":"Zookeeper \u5b98\u7f51: https://zookeeper.apache.org/ \u4e0b\u8f7d: https://zookeeper.apache.org/releases.html \u914d\u7f6e\u6837\u4f8b tickTime = 2000 dataDir = /home/data/zookeeper/data dataLogDir = /home/data/zookeeper/dataLog clientPort = 2181 initLimit = 5 syncLimit = 2 # \u5b9a\u65f6\u6e05\u7406\u6570\u636e # The number of snapshots to retain in dataDir autopurge.snapRetainCount=10 # Purge task interval in hours # Set to \"0\" to disable auto purge feature autopurge.purgeInterval=1 # admin.enableServer=false # admin.serverPort=8088","title":"zookeeper"},{"location":"component/zookeeper/#zookeeper","text":"\u5b98\u7f51: https://zookeeper.apache.org/ \u4e0b\u8f7d: https://zookeeper.apache.org/releases.html","title":"Zookeeper"},{"location":"component/zookeeper/#_1","text":"tickTime = 2000 dataDir = /home/data/zookeeper/data dataLogDir = /home/data/zookeeper/dataLog clientPort = 2181 initLimit = 5 syncLimit = 2 # \u5b9a\u65f6\u6e05\u7406\u6570\u636e # The number of snapshots to retain in dataDir autopurge.snapRetainCount=10 # Purge task interval in hours # Set to \"0\" to disable auto purge feature autopurge.purgeInterval=1 # admin.enableServer=false # admin.serverPort=8088","title":"\u914d\u7f6e\u6837\u4f8b"},{"location":"encryption/pycrypto/","text":"crypto \u80cc\u666f\u77e5\u8bc6 \uff081\uff09 AES \u662f\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6( Advanced Encryption Standard )\u7684\u7f29\u5199\uff0c AES \u662f\u6700\u5e38\u89c1\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002 \u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5 \u4e5f\u5c31\u662f \u52a0\u5bc6 \u548c \u89e3\u5bc6 \u7528\u76f8\u540c\u7684\u5bc6\u94a5\uff0c\u540c\u4e00\u4e2a\u79d8\u94a5\u5373\u7528\u6765\u52a0\u5bc6\uff0c\u4e5f\u7528\u6765\u89e3\u5bc6\u3002 \u5173\u4e8e\u52a0\u5bc6\u89e3\u5bc6\u7684\u539f\u7406\u53ef\u4ee5\u641c\u7d22\u4e00\u4e0b\u76f8\u5173\u7684\u6587\u7ae0\u3002 RSA \u662f\u4e00\u79cd\u5178\u578b\u7684 \u975e\u5bf9\u79f0\u5bc6\u94a5\u5bc6\u7801 \u4f53\u5236\uff0c\u4ece \u52a0\u5bc6\u5bc6\u94a5 \u548c \u89e3\u5bc6\u5bc6\u94a5 \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u63a8\u5bfc\u51fa\u53e6\u4e00\u4e2a\u5728\u8ba1\u7b97\u4e0a\u662f\u4e0d\u53ef\u884c\u7684\u3002 RSA \u7684\u5b89\u5168\u6027\u5efa\u7acb\u5728 \u201c\u5927\u6570\u5206\u89e3\u548c\u7d20\u6027\u68c0\u6d4b\u201d \u8fd9\u4e00\u8457\u540d\u6570\u8bba\u96be\u9898\u7684\u57fa\u7840\u4e0a\u3002 \u516c\u94a5\u5bf9\u53ef\u4ee5\u5b8c\u5168\u516c\u5f00\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u4fdd\u5bc6\uff0c\u4f46\u5fc5\u987b\u63d0\u4f9b\u5b8c\u6574\u6027\u68c0\u6d4b\u673a\u5236\u4ee5\u4fdd\u8bc1\u4e0d\u53d7\u7be1\u6539\uff1b \u79c1\u94a5\u7531\u7528\u6237\u81ea\u5df1\u4fdd\u5b58\u3002\u901a\u4fe1\u53cc\u65b9\u65e0\u9700\u5b9e\u73b0\u4ea4\u6362\u5bc6\u94a5\u5c31\u53ef\u4ee5\u8fdb\u884c\u4fdd\u5bc6\u901a\u4fe1\u3002 \uff082\uff09RSA\u5bc6\u7801\u4f53\u5236\u7b97\u6cd5\u5982\u4e0b\uff1a \u7531\u7528\u6237\u9009\u62e9\u4e24\u4e2a\u4e92\u5f02\u5e76\u4e14\u8ddd\u79bb\u8f83\u8fdc\u7684\u5927\u7d20\u6570 p \u548c q \uff1b \u8ba1\u7b97 n=p\u00d7q \u548c f(n)=(p-1)\u00d7(q-1) \uff1b \u9009\u62e9\u6b63\u6574\u6570 e \uff0c\u4f7f\u5176\u4e0e f(n) \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a 1 \uff1b \u7136\u540e\u8ba1\u7b97\u6b63\u6574\u6570 d \uff0c\u4f7f\u5f97 e \u00d7 d \u5bf9 f(n) \u7684\u4f59\u6570\u4e3a 1 \uff0c\u5373 e\u00d7d\u22611 mod f(n) \uff0c\u6700\u540e\u9500\u6bc1 p \u548c q \u3002 \u7ecf\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5f97\u51fa\u516c\u94a5\u5bf9 (n,e) \u548c\u79c1\u94a5\u5bf9 (n,d) \u3002 \u8bbe M \u4e3a\u660e\u6587\uff0c C \u4e3a\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c \u5219\u52a0\u5bc6\u53d8\u6362\u4e3a\uff1a C=M^e mod n \uff1b \u89e3\u5bc6\u53d8\u6362\u4e3a\uff1a M=C^d mod n \u3002 PyCrypto - Python \u5bc6\u7801\u5b66\u5de5\u5177\u5305 Python \u5bc6\u7801\u5b66\u5de5\u5177\u5305 (pycrypto) \u6ce8\u610f : \u8be5\u8f6f\u4ef6\u4e0d\u518d\u7ef4\u62a4\u3002\u53c2\u8003: https://www.pycrypto.org/ pycrypto \u5386\u53f2\u94fe\u63a5 \u26a0\ufe0f PyCrypto 2.x \u672a\u7ef4\u62a4\u3002\u5df2\u8fc7\u65f6\u4e14\u5305\u542b\u5b89\u5168\u6f0f\u6d1e\u3002\u4ee5\u4e0b\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002 API \u6587\u6863 \uff08epydoc \u8f93\u51fa\uff09 PyCrypto \u6982\u8ff0 \uff08\u4ece Doc/pycrypto.rst \u6784\u5efa \uff09 \u6e90\u4ee3\u7801\u5b58\u50a8\u5e93 (GitHub) \u53d1\u5e03\u538b\u7f29\u5305 \u90ae\u4ef6\u5217\u8868\u5b58\u6863 \uff08 \u672c\u5730\u5feb\u7167 \uff09 Pypi \u8fd9\u662f\u5b89\u5168\u6563\u5217\u51fd\u6570\uff08\u5982 SHA256 \u548c RIPEMD160\uff09\u548c\u5404\u79cd\u52a0\u5bc6\u7b97\u6cd5\uff08AES\u3001DES\u3001RSA\u3001ElGamal \u7b49\uff09\u7684\u96c6\u5408\u3002 \u8bf7\u9009\u62e9\u4ee5\u4e0b\u9009\u9879\u4e4b\u4e00 \uff1a Cryptography: https://cryptography.io/ \u63a8\u8350\u7528\u4e8e\u65b0\u5e94\u7528 \u8f83\u65b0\u7684 API\uff0c\u9677\u9631\u8f83\u5c11\u3002 API \u6587\u6863 GitHub Pypi PyCryptodome: https://www.pycryptodome.org/ \u63a8\u8350\u7528\u4e8e\u4f9d\u8d56 PyCrypto \u7684\u73b0\u6709\u8f6f\u4ef6\u3002 PyCrypto \u7684\u5206\u53c9\u3002\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5728\u672a\u7ecf\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002 API \u6587\u6863 GitHub Pypi \u8001\u7248\u672cAES\u7684ECB\u6a21\u578b\u52a0\u5bc6\u793a\u4f8b import base64 from Crypto.Cipher import AES class AesEncry(object): key = \"U%56#o#u$jk0ffds\".encode('utf-8') # aes\u79d8\u94a5 mode = AES.MODE_ECB cryptos = AES.new(key, mode) def decrypt(self, text): decode_base64 = base64.decodebytes(text.encode(\"utf-8\")) plain_text = self.cryptos.decrypt(decode_base64) return self.uncode_chars(plain_text.decode(\"utf-8\")) @staticmethod def uncode_chars(data): nCount = ord(data[-1]) for i in data[-nCount:]: if ord(i) != nCount: return data return data[:-nCount] def encrypt(self, data): BLOCK_SIZE = 16 pad = lambda s: ( s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE) ) text = pad(str(data)) cipher_text = self.cryptos.encrypt(text.encode(\"utf-8\")) # \u56e0\u4e3aAES\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u4e00\u5b9a\u662fascii\u5b57\u7b26\u96c6\u7684\uff0c\u8f93\u51fa\u4fdd\u5b58\u53ef\u80fd\u5b58\u5728\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u8f6c\u4e3abase64\u8fdb\u5236\u5b57\u7b26\u4e32 return base64.encodebytes(cipher_text).decode(\"utf-8\") ## \u5bf9\u5e94\u7684\u8f83\u65b0\u7684\u4f7f\u7528 PyCryptodome \u7684\u52a0\u5bc6\u65b9\u5f0f from Crypto.Util.Padding import pad, unpad from Crypto.Cipher import AES BLOCK_SIZE = 32 # Bytes key = 'abcdefghijklmnop' cipher = AES.new(key.encode('utf8'), AES.MODE_ECB) msg = cipher.encrypt(pad(b'hello', BLOCK_SIZE)) print(msg.hex()) decipher = AES.new(key.encode('utf8'), AES.MODE_ECB) msg_dec = decipher.decrypt(msg) print(unpad(msg_dec, BLOCK_SIZE)) \u4f7f\u7528cryptography\u8fdb\u884cAES-256-ECB\u52a0\u5bc6 \u539f\u6587: https://gist.github.com/tcitry/df5ee377ad112d7637fe7b9211e6bc83 import base64 from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes from cryptography.hazmat.primitives import padding from cryptography.hazmat.backends import default_backend from django.utils.encoding import force_bytes, force_text SECRET_KEY = \"hellomotherfucker\" value = force_bytes(\"12345678901234567890\") backend = default_backend() key = force_bytes(base64.urlsafe_b64encode(force_bytes(SECRET_KEY))[:32]) class Crypto: def __init__(self): self.encryptor = Cipher(algorithms.AES(key), modes.ECB(), backend).encryptor() self.decryptor = Cipher(algorithms.AES(key), modes.ECB(), backend).decryptor() def encrypt(self): padder = padding.PKCS7(algorithms.AES(key).block_size).padder() padded_data = padder.update(value) + padder.finalize() encrypted_text = self.encryptor.update(padded_data) + self.encryptor.finalize() return encrypted_text def decrypt(self, value): padder = padding.PKCS7(algorithms.AES(key).block_size).unpadder() decrypted_data = self.decryptor.update(value) unpadded = padder.update(decrypted_data) + padder.finalize() return unpadded if __name__ == '__main__': print('>>>>>>>>>>>') crypto = Crypto() text = force_text(base64.urlsafe_b64encode(crypto.encrypt())) print(text) print('<<<<<<<<<<<<<') text = force_text(crypto.decrypt(base64.urlsafe_b64decode(text))) print(text)","title":"crypto"},{"location":"encryption/pycrypto/#crypto","text":"","title":"crypto"},{"location":"encryption/pycrypto/#_1","text":"\uff081\uff09 AES \u662f\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6( Advanced Encryption Standard )\u7684\u7f29\u5199\uff0c AES \u662f\u6700\u5e38\u89c1\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002 \u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5 \u4e5f\u5c31\u662f \u52a0\u5bc6 \u548c \u89e3\u5bc6 \u7528\u76f8\u540c\u7684\u5bc6\u94a5\uff0c\u540c\u4e00\u4e2a\u79d8\u94a5\u5373\u7528\u6765\u52a0\u5bc6\uff0c\u4e5f\u7528\u6765\u89e3\u5bc6\u3002 \u5173\u4e8e\u52a0\u5bc6\u89e3\u5bc6\u7684\u539f\u7406\u53ef\u4ee5\u641c\u7d22\u4e00\u4e0b\u76f8\u5173\u7684\u6587\u7ae0\u3002 RSA \u662f\u4e00\u79cd\u5178\u578b\u7684 \u975e\u5bf9\u79f0\u5bc6\u94a5\u5bc6\u7801 \u4f53\u5236\uff0c\u4ece \u52a0\u5bc6\u5bc6\u94a5 \u548c \u89e3\u5bc6\u5bc6\u94a5 \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u63a8\u5bfc\u51fa\u53e6\u4e00\u4e2a\u5728\u8ba1\u7b97\u4e0a\u662f\u4e0d\u53ef\u884c\u7684\u3002 RSA \u7684\u5b89\u5168\u6027\u5efa\u7acb\u5728 \u201c\u5927\u6570\u5206\u89e3\u548c\u7d20\u6027\u68c0\u6d4b\u201d \u8fd9\u4e00\u8457\u540d\u6570\u8bba\u96be\u9898\u7684\u57fa\u7840\u4e0a\u3002 \u516c\u94a5\u5bf9\u53ef\u4ee5\u5b8c\u5168\u516c\u5f00\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u4fdd\u5bc6\uff0c\u4f46\u5fc5\u987b\u63d0\u4f9b\u5b8c\u6574\u6027\u68c0\u6d4b\u673a\u5236\u4ee5\u4fdd\u8bc1\u4e0d\u53d7\u7be1\u6539\uff1b \u79c1\u94a5\u7531\u7528\u6237\u81ea\u5df1\u4fdd\u5b58\u3002\u901a\u4fe1\u53cc\u65b9\u65e0\u9700\u5b9e\u73b0\u4ea4\u6362\u5bc6\u94a5\u5c31\u53ef\u4ee5\u8fdb\u884c\u4fdd\u5bc6\u901a\u4fe1\u3002 \uff082\uff09RSA\u5bc6\u7801\u4f53\u5236\u7b97\u6cd5\u5982\u4e0b\uff1a \u7531\u7528\u6237\u9009\u62e9\u4e24\u4e2a\u4e92\u5f02\u5e76\u4e14\u8ddd\u79bb\u8f83\u8fdc\u7684\u5927\u7d20\u6570 p \u548c q \uff1b \u8ba1\u7b97 n=p\u00d7q \u548c f(n)=(p-1)\u00d7(q-1) \uff1b \u9009\u62e9\u6b63\u6574\u6570 e \uff0c\u4f7f\u5176\u4e0e f(n) \u7684\u6700\u5927\u516c\u7ea6\u6570\u4e3a 1 \uff1b \u7136\u540e\u8ba1\u7b97\u6b63\u6574\u6570 d \uff0c\u4f7f\u5f97 e \u00d7 d \u5bf9 f(n) \u7684\u4f59\u6570\u4e3a 1 \uff0c\u5373 e\u00d7d\u22611 mod f(n) \uff0c\u6700\u540e\u9500\u6bc1 p \u548c q \u3002 \u7ecf\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5f97\u51fa\u516c\u94a5\u5bf9 (n,e) \u548c\u79c1\u94a5\u5bf9 (n,d) \u3002 \u8bbe M \u4e3a\u660e\u6587\uff0c C \u4e3a\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c \u5219\u52a0\u5bc6\u53d8\u6362\u4e3a\uff1a C=M^e mod n \uff1b \u89e3\u5bc6\u53d8\u6362\u4e3a\uff1a M=C^d mod n \u3002","title":"\u80cc\u666f\u77e5\u8bc6"},{"location":"encryption/pycrypto/#pycrypto-python","text":"Python \u5bc6\u7801\u5b66\u5de5\u5177\u5305 (pycrypto) \u6ce8\u610f : \u8be5\u8f6f\u4ef6\u4e0d\u518d\u7ef4\u62a4\u3002\u53c2\u8003: https://www.pycrypto.org/ pycrypto \u5386\u53f2\u94fe\u63a5 \u26a0\ufe0f PyCrypto 2.x \u672a\u7ef4\u62a4\u3002\u5df2\u8fc7\u65f6\u4e14\u5305\u542b\u5b89\u5168\u6f0f\u6d1e\u3002\u4ee5\u4e0b\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002 API \u6587\u6863 \uff08epydoc \u8f93\u51fa\uff09 PyCrypto \u6982\u8ff0 \uff08\u4ece Doc/pycrypto.rst \u6784\u5efa \uff09 \u6e90\u4ee3\u7801\u5b58\u50a8\u5e93 (GitHub) \u53d1\u5e03\u538b\u7f29\u5305 \u90ae\u4ef6\u5217\u8868\u5b58\u6863 \uff08 \u672c\u5730\u5feb\u7167 \uff09 Pypi \u8fd9\u662f\u5b89\u5168\u6563\u5217\u51fd\u6570\uff08\u5982 SHA256 \u548c RIPEMD160\uff09\u548c\u5404\u79cd\u52a0\u5bc6\u7b97\u6cd5\uff08AES\u3001DES\u3001RSA\u3001ElGamal \u7b49\uff09\u7684\u96c6\u5408\u3002 \u8bf7\u9009\u62e9\u4ee5\u4e0b\u9009\u9879\u4e4b\u4e00 \uff1a Cryptography: https://cryptography.io/ \u63a8\u8350\u7528\u4e8e\u65b0\u5e94\u7528 \u8f83\u65b0\u7684 API\uff0c\u9677\u9631\u8f83\u5c11\u3002 API \u6587\u6863 GitHub Pypi PyCryptodome: https://www.pycryptodome.org/ \u63a8\u8350\u7528\u4e8e\u4f9d\u8d56 PyCrypto \u7684\u73b0\u6709\u8f6f\u4ef6\u3002 PyCrypto \u7684\u5206\u53c9\u3002\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5728\u672a\u7ecf\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002 API \u6587\u6863 GitHub Pypi","title":"PyCrypto - Python \u5bc6\u7801\u5b66\u5de5\u5177\u5305"},{"location":"encryption/pycrypto/#aesecb","text":"import base64 from Crypto.Cipher import AES class AesEncry(object): key = \"U%56#o#u$jk0ffds\".encode('utf-8') # aes\u79d8\u94a5 mode = AES.MODE_ECB cryptos = AES.new(key, mode) def decrypt(self, text): decode_base64 = base64.decodebytes(text.encode(\"utf-8\")) plain_text = self.cryptos.decrypt(decode_base64) return self.uncode_chars(plain_text.decode(\"utf-8\")) @staticmethod def uncode_chars(data): nCount = ord(data[-1]) for i in data[-nCount:]: if ord(i) != nCount: return data return data[:-nCount] def encrypt(self, data): BLOCK_SIZE = 16 pad = lambda s: ( s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE) ) text = pad(str(data)) cipher_text = self.cryptos.encrypt(text.encode(\"utf-8\")) # \u56e0\u4e3aAES\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u4e0d\u4e00\u5b9a\u662fascii\u5b57\u7b26\u96c6\u7684\uff0c\u8f93\u51fa\u4fdd\u5b58\u53ef\u80fd\u5b58\u5728\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u8f6c\u4e3abase64\u8fdb\u5236\u5b57\u7b26\u4e32 return base64.encodebytes(cipher_text).decode(\"utf-8\") ## \u5bf9\u5e94\u7684\u8f83\u65b0\u7684\u4f7f\u7528 PyCryptodome \u7684\u52a0\u5bc6\u65b9\u5f0f from Crypto.Util.Padding import pad, unpad from Crypto.Cipher import AES BLOCK_SIZE = 32 # Bytes key = 'abcdefghijklmnop' cipher = AES.new(key.encode('utf8'), AES.MODE_ECB) msg = cipher.encrypt(pad(b'hello', BLOCK_SIZE)) print(msg.hex()) decipher = AES.new(key.encode('utf8'), AES.MODE_ECB) msg_dec = decipher.decrypt(msg) print(unpad(msg_dec, BLOCK_SIZE))","title":"\u8001\u7248\u672cAES\u7684ECB\u6a21\u578b\u52a0\u5bc6\u793a\u4f8b"},{"location":"encryption/pycrypto/#cryptographyaes-256-ecb","text":"\u539f\u6587: https://gist.github.com/tcitry/df5ee377ad112d7637fe7b9211e6bc83 import base64 from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes from cryptography.hazmat.primitives import padding from cryptography.hazmat.backends import default_backend from django.utils.encoding import force_bytes, force_text SECRET_KEY = \"hellomotherfucker\" value = force_bytes(\"12345678901234567890\") backend = default_backend() key = force_bytes(base64.urlsafe_b64encode(force_bytes(SECRET_KEY))[:32]) class Crypto: def __init__(self): self.encryptor = Cipher(algorithms.AES(key), modes.ECB(), backend).encryptor() self.decryptor = Cipher(algorithms.AES(key), modes.ECB(), backend).decryptor() def encrypt(self): padder = padding.PKCS7(algorithms.AES(key).block_size).padder() padded_data = padder.update(value) + padder.finalize() encrypted_text = self.encryptor.update(padded_data) + self.encryptor.finalize() return encrypted_text def decrypt(self, value): padder = padding.PKCS7(algorithms.AES(key).block_size).unpadder() decrypted_data = self.decryptor.update(value) unpadded = padder.update(decrypted_data) + padder.finalize() return unpadded if __name__ == '__main__': print('>>>>>>>>>>>') crypto = Crypto() text = force_text(base64.urlsafe_b64encode(crypto.encrypt())) print(text) print('<<<<<<<<<<<<<') text = force_text(crypto.decrypt(base64.urlsafe_b64decode(text))) print(text)","title":"\u4f7f\u7528cryptography\u8fdb\u884cAES-256-ECB\u52a0\u5bc6"},{"location":"other/functions/","text":"\u51fd\u6570 \u4e3a\u4f55\u8981\u7528sys.exit()\u9000\u51fa\uff1f \u539f\u6587: \u4e3a\u4f55\u8981\u7528sys.exit()\u9000\u51fa\uff1f Python\u67094\u4e2a\u4e0d\u540c\u7684\u9000\u51fa\u7a0b\u5e8f\u7684\u51fd\u6570\uff0c exit() \uff0c quit() \uff0c os._exit() \u548c\u672c\u6587\u8981\u4ecb\u7ecd\u7684 sys.exit() \u3002 exit() \u548c quit() \u662f\u4e00\u6837\u7684\uff0c\u5b83\u4fe9\u7684\u529f\u80fd\u57fa\u672c\u4e0a\u4e0e sys.exit() \u4e00\u6837\uff0c\u53ea\u6709 os._exit() \u6709\u4e9b\u7b80\u5355\u7c97\u66b4\u3002 exit\u548cquit\u51fd\u6570 \u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\uff0c\u5c31\u662f\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5e26\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u8fd4\u56de\u7801\uff0c\u5982\u679c\u4e0d\u5e26\u53c2\u6570\uff0c\u9ed8\u8ba4\u5c31\u662f\u8fd4\u56de0. xinlin@ubuntu:~/test$ python3 -q >>> exit(111) xinlin@ubuntu:~/test$ echo $? 111 xinlin@ubuntu:~/test$ python3 -q >>> quit(222) xinlin@ubuntu:~/test$ echo $? 222 xinlin@ubuntu:~/test$ python3 -q >>> exit() xinlin@ubuntu:~/test$ echo $? 0 xinlin@ubuntu:~/test$ python3 -q >>> quit() xinlin@ubuntu:~/test$ echo $? 0 \u8fd9\u4e24\u4e2a\u51fd\u6570\u4e00\u822c\u5728\u4ea4\u4e92\u5f0f\u7684python\u89e3\u91ca\u5668\u4e2d\u4f7f\u7528\u3002\u5176\u5b9e\u5b83\u4fe9\u4e5f\u4f1a\u629b\u51fa SystemExit\u5f02\u5e38 \uff0c\u56e0\u6b64\u8bf4\u8ddf sys.exit() \u4e00\u6837\u3002 sys.exit()\u51fd\u6570 sys\u6a21\u5757 \u7684 exit \u51fd\u6570\uff0c\u901a\u8fc7\u629b\u51fa\u4e00\u4e2a SystemExit\u5f02\u5e38 \u6765\u5c1d\u8bd5\u7ed3\u675f\u7a0b\u5e8f\uff0cPython\u4ee3\u7801\u53ef\u4ee5\u6355\u83b7\u8fd9\u4e2a\u5f02\u5e38\u6765\u8fdb\u884c\u4e00\u4e9b\u7a0b\u5e8f\u9000\u51fa\u524d\u7684\u6e05\u7406\u5de5\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u9000\u51fa\u7a0b\u5e8f\u3002 sys.exit \u51fd\u6570\u540c\u6837\u53ef\u4ee5\u5e26\u4e00\u4e2a\u53c2\u6570\u6765\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u9000\u51fa\u7801\uff0c\u9ed8\u8ba4\u662f 0 . >>> import sys >>> try: ... sys.exit(101) ... except SystemExit as e: ... print(repr(e)) ... print(str(e)) ... SystemExit(101) 101 >>> \u770b\u8d77\u6765\u4f7f\u7528 str() \u51fd\u6570\u5728 except \u5206\u652f\u83b7\u53d6\u8fd4\u56de\u7801\uff0c\u6bd4\u8f83\u5224\u65ad\u4e0d\u540c\u7684\u8fd4\u56de\u7801\uff0c\u5e76\u505a\u54cd\u5e94\u7684\u6e05\u7406\u52a8\u4f5c\uff0c\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u3002\u53e6\u5916\u4e00\u4e2a\u7ec6\u8282\uff0c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u5728Python\u89e3\u91ca\u5668\u4e2d\u6267\u884c\uff0c\u56e0\u4e3a\u5f02\u5e38\u88ab\u6355\u83b7\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5bfc\u81f4\u89e3\u91ca\u5668\u9000\u51fa\uff01 \u6355\u83b7\u4e86 sys.exit() \u51fd\u6570\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u5904\u7406\u4e4b\u540e\uff0c\u8fd8\u8981\u7a0b\u5e8f\u7ee7\u7eed\u9000\u51fa\uff0c\u5c31\u9700\u8981\u76f4\u63a5\u4f7f\u7528 exit \u6216 quit \u51fd\u6570\u3002\u5b9e\u8df5\u4e2d\uff0c\u5b8c\u6574\u7684\u4f7f\u7528 sys.exit \u51fd\u6570\u7684\u903b\u8f91\u5e94\u8be5\u662f\u5982\u4e0b\u8fd9\u6837\u7684\u4ee3\u7801\uff1a import sys def main(): sys.exit(123) return if __name__ == '__main__': try: main() except SystemExit as e: if str(e) == '123': print('---123---') exit(123) \u4e00\u822c\u5728 python \u811a\u672c\u4e2d\u90fd\u9009\u62e9\u4f7f\u7528 sys.exit \u51fd\u6570\u9000\u51fa\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6709\u4e2a\u5f02\u5e38\u6355\u83b7\u673a\u5236\u6765\u505a\u6e05\u7406\u626b\u5c3e\u7684\u5de5\u4f5c\uff0c\u7a0b\u5e8f\u4f1a\u66f4\u52a0\u7075\u6d3b\u5065\u58ee\u3002 os._exit()\u51fd\u6570 \u8fd9\u4e2a\u51fd\u6570\u7b80\u5355\u7c97\u66b4\uff0c\u5c31\u662f\u76f4\u63a5\u9000\u51fapython\u89e3\u91ca\u5668\uff0c\u540e\u9762\u7684\u4ee3\u7801\u90fd\u4e0d\u6267\u884c\u4e86\uff01\u4e00\u822c\u7a0b\u5e8f\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u9000\u51fa\u65b9\u5f0f\u3002 \u8865\u5145\u4e00\u4e2a\u7ec6\u8282\uff1a \u5728python\u7ebf\u7a0b\u4e2d\uff0c\u4f7f\u7528 sys.exit \uff08\u5305\u62ec exit \u548c quit \uff09\uff0c\u90fd\u53ea\u80fd\u5b9e\u73b0\u9000\u51fa\u5b50\u7ebf\u7a0b\uff0c\u800c\u4e0d\u80fd\u9000\u51fa\u4e3b\u7ebf\u7a0b\uff1b \u5982\u679c\u5728\u5b50\u7ebf\u7a0b\u4e2d\u8c03\u7528 os._exit \uff0c\u53ef\u4ee5\u5b9e\u73b0\u6574\u4e2a\u7a0b\u5e8f\u7684\u9000\u51fa\u3002","title":"Python\u51fd\u6570"},{"location":"other/functions/#_1","text":"","title":"\u51fd\u6570"},{"location":"other/functions/#sysexit","text":"\u539f\u6587: \u4e3a\u4f55\u8981\u7528sys.exit()\u9000\u51fa\uff1f Python\u67094\u4e2a\u4e0d\u540c\u7684\u9000\u51fa\u7a0b\u5e8f\u7684\u51fd\u6570\uff0c exit() \uff0c quit() \uff0c os._exit() \u548c\u672c\u6587\u8981\u4ecb\u7ecd\u7684 sys.exit() \u3002 exit() \u548c quit() \u662f\u4e00\u6837\u7684\uff0c\u5b83\u4fe9\u7684\u529f\u80fd\u57fa\u672c\u4e0a\u4e0e sys.exit() \u4e00\u6837\uff0c\u53ea\u6709 os._exit() \u6709\u4e9b\u7b80\u5355\u7c97\u66b4\u3002 exit\u548cquit\u51fd\u6570 \u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\uff0c\u5c31\u662f\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5e26\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u8fd4\u56de\u7801\uff0c\u5982\u679c\u4e0d\u5e26\u53c2\u6570\uff0c\u9ed8\u8ba4\u5c31\u662f\u8fd4\u56de0. xinlin@ubuntu:~/test$ python3 -q >>> exit(111) xinlin@ubuntu:~/test$ echo $? 111 xinlin@ubuntu:~/test$ python3 -q >>> quit(222) xinlin@ubuntu:~/test$ echo $? 222 xinlin@ubuntu:~/test$ python3 -q >>> exit() xinlin@ubuntu:~/test$ echo $? 0 xinlin@ubuntu:~/test$ python3 -q >>> quit() xinlin@ubuntu:~/test$ echo $? 0 \u8fd9\u4e24\u4e2a\u51fd\u6570\u4e00\u822c\u5728\u4ea4\u4e92\u5f0f\u7684python\u89e3\u91ca\u5668\u4e2d\u4f7f\u7528\u3002\u5176\u5b9e\u5b83\u4fe9\u4e5f\u4f1a\u629b\u51fa SystemExit\u5f02\u5e38 \uff0c\u56e0\u6b64\u8bf4\u8ddf sys.exit() \u4e00\u6837\u3002 sys.exit()\u51fd\u6570 sys\u6a21\u5757 \u7684 exit \u51fd\u6570\uff0c\u901a\u8fc7\u629b\u51fa\u4e00\u4e2a SystemExit\u5f02\u5e38 \u6765\u5c1d\u8bd5\u7ed3\u675f\u7a0b\u5e8f\uff0cPython\u4ee3\u7801\u53ef\u4ee5\u6355\u83b7\u8fd9\u4e2a\u5f02\u5e38\u6765\u8fdb\u884c\u4e00\u4e9b\u7a0b\u5e8f\u9000\u51fa\u524d\u7684\u6e05\u7406\u5de5\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u9000\u51fa\u7a0b\u5e8f\u3002 sys.exit \u51fd\u6570\u540c\u6837\u53ef\u4ee5\u5e26\u4e00\u4e2a\u53c2\u6570\u6765\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u9000\u51fa\u7801\uff0c\u9ed8\u8ba4\u662f 0 . >>> import sys >>> try: ... sys.exit(101) ... except SystemExit as e: ... print(repr(e)) ... print(str(e)) ... SystemExit(101) 101 >>> \u770b\u8d77\u6765\u4f7f\u7528 str() \u51fd\u6570\u5728 except \u5206\u652f\u83b7\u53d6\u8fd4\u56de\u7801\uff0c\u6bd4\u8f83\u5224\u65ad\u4e0d\u540c\u7684\u8fd4\u56de\u7801\uff0c\u5e76\u505a\u54cd\u5e94\u7684\u6e05\u7406\u52a8\u4f5c\uff0c\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u3002\u53e6\u5916\u4e00\u4e2a\u7ec6\u8282\uff0c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u5728Python\u89e3\u91ca\u5668\u4e2d\u6267\u884c\uff0c\u56e0\u4e3a\u5f02\u5e38\u88ab\u6355\u83b7\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5bfc\u81f4\u89e3\u91ca\u5668\u9000\u51fa\uff01 \u6355\u83b7\u4e86 sys.exit() \u51fd\u6570\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u5904\u7406\u4e4b\u540e\uff0c\u8fd8\u8981\u7a0b\u5e8f\u7ee7\u7eed\u9000\u51fa\uff0c\u5c31\u9700\u8981\u76f4\u63a5\u4f7f\u7528 exit \u6216 quit \u51fd\u6570\u3002\u5b9e\u8df5\u4e2d\uff0c\u5b8c\u6574\u7684\u4f7f\u7528 sys.exit \u51fd\u6570\u7684\u903b\u8f91\u5e94\u8be5\u662f\u5982\u4e0b\u8fd9\u6837\u7684\u4ee3\u7801\uff1a import sys def main(): sys.exit(123) return if __name__ == '__main__': try: main() except SystemExit as e: if str(e) == '123': print('---123---') exit(123) \u4e00\u822c\u5728 python \u811a\u672c\u4e2d\u90fd\u9009\u62e9\u4f7f\u7528 sys.exit \u51fd\u6570\u9000\u51fa\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6709\u4e2a\u5f02\u5e38\u6355\u83b7\u673a\u5236\u6765\u505a\u6e05\u7406\u626b\u5c3e\u7684\u5de5\u4f5c\uff0c\u7a0b\u5e8f\u4f1a\u66f4\u52a0\u7075\u6d3b\u5065\u58ee\u3002 os._exit()\u51fd\u6570 \u8fd9\u4e2a\u51fd\u6570\u7b80\u5355\u7c97\u66b4\uff0c\u5c31\u662f\u76f4\u63a5\u9000\u51fapython\u89e3\u91ca\u5668\uff0c\u540e\u9762\u7684\u4ee3\u7801\u90fd\u4e0d\u6267\u884c\u4e86\uff01\u4e00\u822c\u7a0b\u5e8f\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u9000\u51fa\u65b9\u5f0f\u3002 \u8865\u5145\u4e00\u4e2a\u7ec6\u8282\uff1a \u5728python\u7ebf\u7a0b\u4e2d\uff0c\u4f7f\u7528 sys.exit \uff08\u5305\u62ec exit \u548c quit \uff09\uff0c\u90fd\u53ea\u80fd\u5b9e\u73b0\u9000\u51fa\u5b50\u7ebf\u7a0b\uff0c\u800c\u4e0d\u80fd\u9000\u51fa\u4e3b\u7ebf\u7a0b\uff1b \u5982\u679c\u5728\u5b50\u7ebf\u7a0b\u4e2d\u8c03\u7528 os._exit \uff0c\u53ef\u4ee5\u5b9e\u73b0\u6574\u4e2a\u7a0b\u5e8f\u7684\u9000\u51fa\u3002","title":"\u4e3a\u4f55\u8981\u7528sys.exit()\u9000\u51fa\uff1f"},{"location":"report/docx/","text":"Docx \u53c2\u8003 docx_doc \u7684\u6587\u6863. \u5b98\u7f51: pyton-docx","title":"Docx"},{"location":"report/docx/#docx","text":"\u53c2\u8003 docx_doc \u7684\u6587\u6863. \u5b98\u7f51: pyton-docx","title":"Docx"},{"location":"report/excel/","text":"Excel Python\u8bfb\u5199Excel\u683c\u5f0f\u7684\u6570\u636e\u53c2\u8003\uff1a https://www.python-excel.org/ \u4ee5\u53ca github \u7ec4\u7ec7: python-excel \u5728 Python \u4e2d\u5904\u7406 Excel \u6587\u4ef6 openpyxl : \u7528\u4e8e\u8bfb\u5199 Excel 2010 \u6587\u4ef6\u7684\u63a8\u8350\u5305 xlsxwriter : \u7528\u4e8e\u5199\u5165\u6570\u636e, \u683c\u5f0f\u5316\u4fe1\u606f\uff0c\u7279\u522b\u662f Excel 2010 \u683c\u5f0f\uff08\u5373\uff1a.xlsx\uff09\u7684\u56fe\u8868\u7684\u66ff\u4ee3\u5305 pyxlsb : \u8bfb\u53d6xlsb\u683c\u5f0f\u7684 Excel \u6587\u4ef6. pylightxl : \u8bfb\u53d6 xlsx \u548c xlsm \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u4ee5\u53ca\u5199\u5165 xlsx \u683c\u5f0f\u6587\u4ef6\u3002 xlrd : \u4ece\u65e7 Excel \u6587\u4ef6\uff08\u5373\uff1a.xls\uff09\u4e2d\u8bfb\u53d6\u6570\u636e\u548c\u683c\u5f0f\u4fe1\u606f xlwt : \u5c06\u6570\u636e\u548c\u683c\u5f0f\u4fe1\u606f\u5199\u5165\u65e7\u7248 Excel \u6587\u4ef6\uff08\u5373\uff1a.xls\uff09 xlutils : \u6536\u96c6\u4e86\u9700\u8981xlrd\u548c\u7684\u5b9e\u7528\u7a0b\u5e8fxlwt\uff0c\u5305\u62ec\u590d\u5236\u548c\u4fee\u6539\u6216\u8fc7\u6ee4\u73b0\u6709 Excel \u6587\u4ef6\u7684\u80fd\u529b\u3002 xlwings : xlwings \u662f\u4e00\u4e2aBSD \u8bb8\u53ef\u7684Python \u5e93\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u4ece Excel \u8c03\u7528 Python\uff0c\u53cd\u4e4b\u4ea6\u7136: \u811a\u672c \uff1a\u4f7f\u7528\u63a5\u8fd1 VBA \u7684\u8bed\u6cd5\u4ece Python \u81ea\u52a8/\u4e0e Excel \u4ea4\u4e92\u3002 \u5b8f \uff1a\u7528\u5e72\u51c0\u800c\u5f3a\u5927\u7684 Python \u4ee3\u7801\u66ff\u6362\u4f60\u51cc\u4e71\u7684 VBA \u5b8f\u3002 UDF \uff1a\u5728 Python \u4e2d\u7f16\u5199\u7528\u6237\u5b9a\u4e49\u51fd\u6570 (UDF)\uff08\u4ec5\u9650 Windows\uff09\u3002 \u5e38\u89c1\u95ee\u9898 \u8f6c\u6362Excel\u7684float\u7c7b\u578b\u7684\u65f6\u95f4 \u53c2\u8003\uff1a https://stackoverflow.com/questions/32430679/how-to-read-dates-using-xlrd ```python import datetime import xlrd book = xlrd.open_workbook(\"myexcelfile.xls\") sh = book.sheet_by_index(0) a1 = sh.cell_value(rowx=0, colx=0) a1_as_datetime = datetime.datetime(*xlrd.xldate_as_tuple(a1, book.datemode)) print 'datetime: %s' % a1_as_datetime ```","title":"Excel"},{"location":"report/excel/#excel","text":"Python\u8bfb\u5199Excel\u683c\u5f0f\u7684\u6570\u636e\u53c2\u8003\uff1a https://www.python-excel.org/ \u4ee5\u53ca github \u7ec4\u7ec7: python-excel","title":"Excel"},{"location":"report/excel/#python-excel","text":"openpyxl : \u7528\u4e8e\u8bfb\u5199 Excel 2010 \u6587\u4ef6\u7684\u63a8\u8350\u5305 xlsxwriter : \u7528\u4e8e\u5199\u5165\u6570\u636e, \u683c\u5f0f\u5316\u4fe1\u606f\uff0c\u7279\u522b\u662f Excel 2010 \u683c\u5f0f\uff08\u5373\uff1a.xlsx\uff09\u7684\u56fe\u8868\u7684\u66ff\u4ee3\u5305 pyxlsb : \u8bfb\u53d6xlsb\u683c\u5f0f\u7684 Excel \u6587\u4ef6. pylightxl : \u8bfb\u53d6 xlsx \u548c xlsm \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u4ee5\u53ca\u5199\u5165 xlsx \u683c\u5f0f\u6587\u4ef6\u3002 xlrd : \u4ece\u65e7 Excel \u6587\u4ef6\uff08\u5373\uff1a.xls\uff09\u4e2d\u8bfb\u53d6\u6570\u636e\u548c\u683c\u5f0f\u4fe1\u606f xlwt : \u5c06\u6570\u636e\u548c\u683c\u5f0f\u4fe1\u606f\u5199\u5165\u65e7\u7248 Excel \u6587\u4ef6\uff08\u5373\uff1a.xls\uff09 xlutils : \u6536\u96c6\u4e86\u9700\u8981xlrd\u548c\u7684\u5b9e\u7528\u7a0b\u5e8fxlwt\uff0c\u5305\u62ec\u590d\u5236\u548c\u4fee\u6539\u6216\u8fc7\u6ee4\u73b0\u6709 Excel \u6587\u4ef6\u7684\u80fd\u529b\u3002 xlwings : xlwings \u662f\u4e00\u4e2aBSD \u8bb8\u53ef\u7684Python \u5e93\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u4ece Excel \u8c03\u7528 Python\uff0c\u53cd\u4e4b\u4ea6\u7136: \u811a\u672c \uff1a\u4f7f\u7528\u63a5\u8fd1 VBA \u7684\u8bed\u6cd5\u4ece Python \u81ea\u52a8/\u4e0e Excel \u4ea4\u4e92\u3002 \u5b8f \uff1a\u7528\u5e72\u51c0\u800c\u5f3a\u5927\u7684 Python \u4ee3\u7801\u66ff\u6362\u4f60\u51cc\u4e71\u7684 VBA \u5b8f\u3002 UDF \uff1a\u5728 Python \u4e2d\u7f16\u5199\u7528\u6237\u5b9a\u4e49\u51fd\u6570 (UDF)\uff08\u4ec5\u9650 Windows\uff09\u3002","title":"\u5728 Python \u4e2d\u5904\u7406 Excel \u6587\u4ef6"},{"location":"report/excel/#_1","text":"\u8f6c\u6362Excel\u7684float\u7c7b\u578b\u7684\u65f6\u95f4 \u53c2\u8003\uff1a https://stackoverflow.com/questions/32430679/how-to-read-dates-using-xlrd ```python import datetime import xlrd book = xlrd.open_workbook(\"myexcelfile.xls\") sh = book.sheet_by_index(0) a1 = sh.cell_value(rowx=0, colx=0) a1_as_datetime = datetime.datetime(*xlrd.xldate_as_tuple(a1, book.datemode)) print 'datetime: %s' % a1_as_datetime ```","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"web/flask/file/","text":"flask \u8fd9\u91cc\u662f\u548cflask\u76f8\u5173\u7684\u95ee\u9898\u5b66\u4e60\u8bb0\u5f55\u3002 1.1.x \u7248\u672c\u7684\u6587\u6863\uff1a https://flask.palletsprojects.com/en/1.1.x/ 2.0.x \u7248\u672c\u7684\u6587\u6863\uff1a https://flask.palletsprojects.com/en/2.0.x/ \u6587\u4ef6 flask 1.1.x \u7248\u672c\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61 file \u7684\u7c7b\u4e3a werkzeug.datastructures.FileStorage , \u53c2\u8003: FileStorage","title":"flask"},{"location":"web/flask/file/#flask","text":"\u8fd9\u91cc\u662f\u548cflask\u76f8\u5173\u7684\u95ee\u9898\u5b66\u4e60\u8bb0\u5f55\u3002 1.1.x \u7248\u672c\u7684\u6587\u6863\uff1a https://flask.palletsprojects.com/en/1.1.x/ 2.0.x \u7248\u672c\u7684\u6587\u6863\uff1a https://flask.palletsprojects.com/en/2.0.x/","title":"flask"},{"location":"web/flask/file/#_1","text":"flask 1.1.x \u7248\u672c\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61 file \u7684\u7c7b\u4e3a werkzeug.datastructures.FileStorage , \u53c2\u8003: FileStorage","title":"\u6587\u4ef6"}]}